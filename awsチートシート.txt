# aws cliをインストール（下記に従ってpkgをインストールする）
https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html

# IAM Userを作成（プログラムから実行、既存ポリシーをアタッチでAdministratorAccessをアタッチする）→ ACCESS KEY IDとSECRET ACCESS KEYを取得

# aws cliにIAMを紐付ける
aws configure --profile <profile名>
ACCESS KEY ID：取得した値
SECRET ACCESS KEY：取得した値
Default Region：ap-northeast-1
Default Output format：入力しなくて大丈夫

# aws cliで作成したプロファイルを確認（実行した結果、上で作成したIAMユーザが見えていれば成功！）
aws iam list-users --profile <profile名>

# eksctlをインストール（Githubにインストールコマンドのってる（https://github.com/weaveworks/eksctl））
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin

# eksctlバージョン
eksctl version

# eksctlヘルプ
eksctl -h

# eksctlでは簡単にeksクラスターを作成することができる。（⚠︎⚠︎⚠︎⚠︎⚠︎ -pまたは--profileで明示的にaws cliのprofileを指定しないとdefaultのaws credentialsが使われるので注意）
# 作成されるクラスターのDefault条件は下記。
## ・自動生成された名前のクラスター
## ・m5.largeのEC2インスタンスによって構成された２台のworker nodes
## ・EC2は公式AWS EKS AMI
## ・リージョンはus-west-2
## ・EKS用のVPCが作成される（Quotaに注意）
eksctl create cluster

# カスタマイズする場合はcluster.yamlを記述
eksctl create cluster -f cluster.yaml

# お試しで作成した際のコマンドは下記（20~25分くらいかかる）
eksctl create cluster --name test-cluster --region ap-northeast-1 --profile eks_setup_user
# もしprofileが分からない場合：less ~/.aws/credentials
# vpc, サブネット, igw, CloudFormation(AWSのリソースをコードで管理。イベントからどんなリソースを作成したか確認できる), EC2, EKSが自動で作成される。

# kubectlの設定（kubeconfigに新しいクラスターを追加（追加したクラスターは↑で作成したtest-cluster））
aws eks update-kubeconfig --name test-cluster --profile eks_setup_user
# 更新したkubeconfigの確認： less ~/.kube/config（次を確認：test-clusterのクラスターが作成。test-clusterのcontextが作成。current_contextがtest-clusterになっていることを確認）
# ここから先はkubectlでaws上のリソースを操作することができるようになる

# ⚠︎⚠︎⚠︎⚠︎⚠︎ ︎簡単にサービスを公開する流れ（実際にはセキュリティや可用性の設定を行う必要がある）
# deploymentを作成したりできる
kubectl create deployment nginx --image=nginx --replicas=3
# aws上ではローカルでは確認できなかったtypeがLoadBalancerのServiceを立ち上げることができる。
kubectl create service loadbalancer nginx --tcp=80
# ロードバランサーはAWSコンソール上のEC2のロードバランサーから立ち上がっていることを確認
# DNS名（http://a57ac91c64c9c4249aeeeeeec4a73fe2-1952700971.ap-northeast-1.elb.amazonaws.com）からpodに接続することができる
kubectl delete service nginx（ロードバランサーが削除されていることをAWSコンソール上から確認できる）
kubectl delete deploy nginx

# AWS Load Balancer Controllerをインストールすることで、AWS上のロードバランサーを作成することができる。
# https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/deploy/installation/
# cluster.yamlに下記を追記
# nodeGroups.iam
## withAddonPolicies
### awsLoadBalancerController: true
# cert-managerをインストールすることで、自動でSSL証明書を発行することができる。（前述のURLに詳細記載）
# AwsLoadBalancerController用のDeployment, Serviceを作成（前述のURLに詳細記載）： kubectl apply -f v2_4_0_full.yaml
# ingressを作成（eks_ingress.ymlを参照）

# クラスターの削除（5~10分くらいかかる）
eksctl delete cluster --name test-cluster --region ap-northeast-1 --profile eks_setup_user

# NodeGroupの削除（NodeGroupはworker nodeのこと）コマンドが返ってきてから削除されるまで時間かかるのでkubectl get node で適宜確認する
eksctl delete nodegroup --cluster test-cluster --region ap-northeast-1 --profile eks_setup_user --name ng-1
# cluster.yamlに記述したNodeGroupを削除する場合は下記
eksctl delete nodegroup -f cluster.yaml --approve --profile eks_setup_user

# NodeGroupの作成（cluster.yamlに記述したNodeGroupを作成する場合は下記）
eksctl create nodegroup -f cluster.yaml --profile eks_setup_user

# IAMユーザーの削除
1. ~/.aws/credentialsと~/.aws/configからeks_setup_userに関する行を削除
2. AWSコンソール上のIAMユーザーページからeks_setup_userを削除
3. ~/.kube/configのcurrent_contextをdocker-desktopに戻しておく

# Cluster Autoscaler
# kubernetesでnodeのオートスケールを行うためのツール
# 各種クラウドプロバイダーの仕組みに沿ってオートスケーリングできるように実装されている
# AWSではAuto Scaling Groupを利用している
# cluster.yamlに下記を追記
# nodeGroups.iam
## withAddonPolicies
### autoScaler: true
# Node数の制限は下記を追記
# nodeGroups
# minSize: 1 # 最小ノード数
# maxSize: 3 # 最大ノード数
# desiredCapacity: 1 # 起動時のノード数
# Cluster Autoscalerのインストール（https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler/cloudprovider/aws）
# 右記manifestを参考に修正： https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml
# 作成したmanifestをapplyするとcluster auto scaleは適用： kubectl apply -f cluster-autoscaler-autodiscover.yaml
# 右記のようにpod数を増やすとNodeが増えることを確認できる： kubectl scale deployment nginx --replicas=10

# CloudWatch Container Insights
# CloudWatch Container Insightsでは、EKS上のアプリケーションのログやメトリクスを収集、集計、可視化することができる
# CloudWatchの機能で、ダッシュボード上でメトリクスを可視化したり、メトリクスやログに対してアラートを設定、通知したりできる
# cluster.yamlに下記を追記
# nodeGroups.iam
## withAddonPolicies
### cloudWatch: true
# CloudWatch Container Insightsのコマンドでのインストール（https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/Container-Insights-setup-EKS-quickstart.html）
# ⚠︎メトリクスの確認
# AWSコンソール上でCloudWatch > インサイト > Container Insightsを選択
# 「リソース」が選択されているセレクターを「パフォーマンスのモニタリング」に変更
# アラートを設定したいPodを選択（フィルター等を使用）
# アラートを設定したいリソースのメニューボタンを押下し、「メトリクスで表示」を選択
# アクションの中からベルマークを選択
# 閾値を設定してアラートの作成をしていく
# ⚠︎ ログの確認
# AWSコンソール上でCloudWatch > ログ > ロググループを選択
# ロググループの中に「/aws/containerinsights/<cluster名>/application」があるので選択
# ログを確認したいPod名を選択するとログが表示される

# ECRにイメージをpush
# アカウントIDを取得
# aws sts get-caller-identity --profile eks_setup_user
# docker build -t <アカウントID>.dkr.ecr.ap-northeast-1.amazonaws.com/<イメージ名>:<タグ> .
# ECRへログイン
# aws ecr get-login-password --region ap-northeast-1 --profile eks_setup_user | docker login --username AWS --password-stdin <アカウントID>.dkr.ecr.ap-northeast-1.amazonaws.com
# ECRにリポジトリを作成
# aws ecr create-repository --repository-name <イメージ名> --region ap-northeast-1 --profile eks_setup_user
# ECRにイメージをpush
# docker push <アカウントID>.dkr.ecr.ap-northeast-1.amazonaws.com/<イメージ名>:<タグ>

# EKSにアクセス可能なIAMユーザーの追加（対象のKubernetesClusterを作成したユーザー以外のIAMでアクセスできるようにしたい場合）（IAMにAdministratorAccessのポリシーをアタッチしていてもAWSリソースとは別に、Kubernetes側でもユーザーの認証機能があるため作成したIAMではアクセスできない）
# IAMユーザーを作成しておく
# aws iam list-users --profile eks_setup_userでアクセスさせたいユーザーのARNを確認
# eksctl create iamidentitymapping --cluster <cluster名> --arn <ユーザーのARN> --group system:masters --username <ユーザー名> --profile eks_setup_user
# IAMユーザーの切り替え（プロフィールを作成）
# aws configure --profile <IAMユーザーのプロファイル名>
# IAMユーザーの切り替え（./kube/configを丸ごと更新する場合。あんまり良くないやり方）
# mv ~/.kube/config ~/.kube/config.bak
# rm -rf ~/.kube/config
# ~/.kube/configの更新： aws --profile <新しいIAM> eks --region ap-northeast-1 update-kubeconfig --name <cluster名>
